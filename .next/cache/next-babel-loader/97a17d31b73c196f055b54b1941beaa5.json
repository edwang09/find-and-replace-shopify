{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, ResourceItem, TextField, Thumbnail, DataTable, Button, Checkbox, Icon } from '@shopify/polaris';\nimport { StarFilledMinor, StarOutlineMinor } from '@shopify/polaris-icons';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport _ from 'lodash';\nimport './ResourceList.css';\nimport { UPDATE_PRODUCTS, SEARCH_PRODUCTS } from \"./graphql.js\";\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      favorites: {},\n      bundles: {},\n      selectedItems: []\n    });\n\n    _defineProperty(this, \"transformData\", (data, searchquery, replacestring, scopes, matchcase) => {\n      const regsearchquery = new RegExp(searchquery, this.getRegexCase(matchcase));\n      let result = {\n        id: data.id\n      };\n      scopes.map(sco => {\n        if (sco === \"tags\") {\n          result[sco] = data[sco].map(tag => tag.replace(regsearchquery, replacestring));\n        } else if (sco === \"description\") {\n          result[\"descriptionHtml\"] = data[sco].replace(regsearchquery, replacestring);\n        } else {\n          result[sco] = data[sco].replace(regsearchquery, replacestring);\n        }\n      });\n      console.log(result);\n      return result;\n    });\n\n    _defineProperty(this, \"handleReplace\", (products, searchquery, replacestring, scopes, matchcase) => {\n      if (!products || products.length < 1) {\n        return;\n      }\n\n      products.edges.map(item => {\n        this.props.apolloClient.mutate({\n          mutation: UPDATE_PRODUCTS,\n          variables: {\n            input: this.transformData(item.node, searchquery, replacestring, scopes, matchcase)\n          }\n        }).then(response => {\n          console.log(response);\n        });\n      });\n    });\n  }\n\n  getRegexCase(matchcase) {\n    return matchcase ? \"g\" : \"gi\";\n  }\n\n  setSelectedItems(selectedItems) {\n    console.log(selectedItems);\n    return this.setState({\n      selectedItems\n    });\n  }\n\n  ObjtoArray(obj) {\n    return _Object$keys(obj).map(key => {\n      return _objectSpread({}, obj[key], {\n        key\n      });\n    });\n  }\n\n  ArrayobjtoArray(obj) {\n    return _Object$keys(obj).map(key => {\n      return {\n        content: obj[key],\n        key\n      };\n    });\n  }\n\n  componentDidMount() {\n    const favorites = store.get(\"favorite\") ? store.get(\"favorite\") : {};\n    const bundles = store.get(\"bundle\") ? store.get(\"bundle\") : {}; // if(Object.keys.length(bundles)===0){\n    //     store.set(\"bundle\",{})\n    // }\n\n    console.log(favorites);\n    console.log(bundles);\n    this.setState({\n      favorites,\n      bundles\n    });\n  }\n\n  runFavorite(key) {\n    const {\n      searchquery,\n      replacestring,\n      scopes,\n      matchcase\n    } = this.state.favorites[key];\n    this.props.apolloClient.query({\n      query: SEARCH_PRODUCTS,\n      variables: {\n        searchquery\n      }\n    }).then(response => {\n      console.log(response);\n\n      if (response && response.data && response.data.products) {\n        this.handleReplace(response.data.products, searchquery, replacestring, scopes, matchcase);\n      } else {\n        console.log(\"no item found\");\n      }\n    });\n  }\n\n  removeFavorite(key) {\n    const {\n      favorites\n    } = this.state;\n    delete favorites[key];\n    store.set(\"favorite\", favorites);\n    this.setState({\n      favorites\n    });\n  }\n\n  createBundle() {\n    const {\n      favorites,\n      bundles\n    } = this.state;\n    const newbundle = this.state.selectedItems.reduce((bundle, key) => {\n      console.log(bundle);\n      const fav = favorites[key];\n      console.log(fav);\n      delete favorites[key];\n      return [...bundle, fav];\n    }, []);\n    const newbundlekey = \"bundle:\" + this.state.selectedItems.join(';');\n    console.log(newbundle);\n    console.log(newbundlekey);\n    console.log(favorites);\n    store.set(\"favorite\", favorites);\n    let newbundles;\n\n    if (!store.get('bundle')) {\n      console.log(\"no current bundle\");\n      newbundles = {\n        [newbundlekey]: newbundle\n      };\n    } else {\n      newbundles = _objectSpread({}, bundles, {\n        [newbundlekey]: newbundle\n      });\n    }\n\n    store.set(\"bundle\", newbundles);\n    this.setState({\n      selectedItems: [],\n      favorites,\n      bundles: newbundles\n    });\n  }\n\n  unbundle(key) {\n    const {\n      favorites,\n      bundles\n    } = this.state;\n    const bundle = bundles[key];\n    bundle.map(fav => {\n      const hashedfav = _Object$keys(fav).sort().map(x => fav[x].toString()).join(\";\");\n\n      favorites[hashedfav] = fav;\n    });\n    delete bundles[key];\n    console.log(bundles);\n    console.log(favorites);\n    store.set(\"favorite\", favorites);\n    store.set(\"bundle\", bundles);\n    this.setState({\n      favorites,\n      bundles\n    });\n  }\n\n  runBundle(key) {\n    const bundle = this.state.bundles[key];\n    bundle.map(fav => {\n      const {\n        searchquery,\n        replacestring,\n        scopes,\n        matchcase\n      } = fav;\n      this.props.apolloClient.query({\n        query: SEARCH_PRODUCTS,\n        variables: {\n          searchquery\n        }\n      }).then(response => {\n        console.log(response);\n\n        if (response && response.data && response.data.products) {\n          this.handleReplace(response.data.products, searchquery, replacestring, scopes, matchcase);\n        } else {\n          console.log(\"no item found\");\n        }\n      });\n    });\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/edit-products');\n    };\n\n    return __jsx(\"div\", null, __jsx(Card, null, __jsx(ResourceList, {\n      resourceName: {\n        singular: 'favorite',\n        plural: 'favorites'\n      },\n      items: this.ObjtoArray(this.state.favorites),\n      selectedItems: this.state.selectedItems,\n      onSelectionChange: this.setSelectedItems.bind(this),\n      selectable: true,\n      promotedBulkActions: [{\n        content: 'Bundle',\n        onAction: () => this.createBundle()\n      }],\n      renderItem: item => {\n        const {\n          key,\n          searchquery,\n          replacestring,\n          matchcase,\n          scopes\n        } = item;\n        const shortcutActions = [{\n          content: 'Run',\n          onAction: () => this.runFavorite(key)\n        }, {\n          content: 'Remove',\n          onAction: () => this.removeFavorite(key)\n        }];\n        return __jsx(ResourceItem, {\n          id: key,\n          shortcutActions: shortcutActions,\n          persistActions: true,\n          name: searchquery\n        }, __jsx(\"h3\", null, __jsx(TextStyle, {\n          variation: \"strong\"\n        }, searchquery, \" | \"), __jsx(TextStyle, {\n          variation: \"subdued\"\n        }, \"in (\", scopes.toString(), \")\")), __jsx(\"div\", null, \"Replace with :\\\"\", replacestring, \"\\\" \", matchcase ? \"(Case Sensitive)\" : \"(Case Insensitive)\"));\n      }\n    })), __jsx(Card, null, __jsx(ResourceList, {\n      resourceName: {\n        singular: 'bundle',\n        plural: 'bundles'\n      },\n      items: this.ArrayobjtoArray(this.state.bundles),\n      renderItem: item => {\n        const {\n          key,\n          content\n        } = item;\n        console.log(item);\n        const shortcutActions = [{\n          content: 'Run',\n          onAction: () => this.runBundle(key)\n        }, {\n          content: 'Unbundle',\n          onAction: () => this.unbundle(key)\n        }];\n        return __jsx(ResourceItem, {\n          id: key,\n          shortcutActions: shortcutActions\n        }, __jsx(\"h3\", null, __jsx(TextStyle, {\n          variation: \"strong\"\n        }, \"Bundle\")), content.map(item => {\n          return __jsx(\"div\", null, \"Find: \\\"\", item.searchquery, \"\\\" in (\", item.scopes.toString(), \"); Replace with :\\\"\", item.replacestring, \"\\\" \", item.matchcase ? \"(Case Sensitive)\" : \"(Case Insensitive)\");\n        }));\n      }\n    })));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":null,"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, ResourceItem, TextField, Thumbnail, DataTable, Button, Checkbox, Icon } from '@shopify/polaris';\nimport { StarFilledMinor, StarOutlineMinor } from '@shopify/polaris-icons';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport _ from 'lodash';\nimport './ResourceList.css';\nimport { UPDATE_PRODUCTS, SEARCH_PRODUCTS } from \"./graphql.js\";\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      favorites: [],\n      selectedItems: []\n    });\n\n    _defineProperty(this, \"transformData\", (data, searchquery, replacestring) => {\n      const regexsearchquery = new RegExp(searchquery, \"gi\");\n      const result = {\n        id: data.id,\n        title: data.title.replace(regexsearchquery, replacestring),\n        handle: data.handle.replace(regexsearchquery, replacestring),\n        descriptionHtml: `<p>${data.description.replace(regexsearchquery, replacestring)}</p>`\n      };\n      return result;\n    });\n\n    _defineProperty(this, \"handleReplace\", (products, searchquery, replacestring) => {\n      if (!products || products.length < 1) {\n        return;\n      }\n\n      products.edges.map(item => {\n        this.props.apolloClient.mutate({\n          mutation: UPDATE_PRODUCTS,\n          variables: {\n            input: this.transformData(item.node, searchquery, replacestring)\n          }\n        }).then(response => {\n          console.log(response);\n        });\n      });\n    });\n  }\n\n  setSelectedItems(selectedItems) {\n    console.log(selectedItems);\n    return this.setState({\n      selectedItems\n    });\n  }\n\n  ObjtoArray(favorite) {\n    return _Object$keys(favorite).map(key => {\n      return _objectSpread({}, favorite[key], {\n        key\n      });\n    });\n  }\n\n  componentDidMount() {\n    const favorite = store.get(\"favorite\");\n    this.setState({\n      favorites: this.ObjtoArray(favorite)\n    });\n  }\n\n  runFavorite(key) {\n    const {\n      searchquery,\n      replacestring\n    } = this.state.favorites.find(o => o.key === key);\n    this.props.apolloClient.query({\n      query: SEARCH_PRODUCTS,\n      variables: {\n        searchquery\n      }\n    }).then(response => {\n      handleReplace(response.products, searchquery, replacestring);\n    });\n  }\n\n  removeFavorite(key) {\n    const favorite = store.get(\"favorite\");\n    delete favorite[key];\n    store.set(\"favorite\", favorite);\n    this.setState({\n      favorites: this.ObjtoArray(favorite)\n    });\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/edit-products');\n    };\n\n    return __jsx(\"div\", null, __jsx(Card, null, __jsx(ResourceList, {\n      resourceName: {\n        singular: 'favorite',\n        plural: 'favorites'\n      },\n      items: this.state.favorites,\n      selectedItems: this.state.selectedItems,\n      onSelectionChange: this.setSelectedItems.bind(this),\n      selectable: true,\n      promotedBulkActions: [{\n        content: 'Bundle',\n        onAction: () => console.log('Todo: implement bulk edit')\n      }],\n      renderItem: item => {\n        const {\n          key,\n          searchquery,\n          replacestring,\n          matchcase\n        } = item;\n        const shortcutActions = [{\n          content: 'Run',\n          onAction: this.runFavorite(key)\n        }, {\n          content: 'Remove',\n          onAction: this.removeFavorite(key)\n        }];\n        return __jsx(ResourceItem, {\n          id: key,\n          url: \"url\",\n          shortcutActions: shortcutActions,\n          name: searchquery\n        }, __jsx(\"h3\", null, __jsx(TextStyle, {\n          variation: \"strong\"\n        }, searchquery)), __jsx(\"div\", null, \"Replace with :\\\"\", replacestring, \"\\\" \", matchcase ? \"(Case Sensitive)\" : \"(Case Insensitive)\"));\n      }\n    })));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/home/edwang09/Documents/Upwork/Shopify/components/FavoriteList.js"],"names":["gql","Query","Mutation","Card","ResourceList","Stack","TextStyle","ResourceItem","TextField","Thumbnail","DataTable","Button","Checkbox","Icon","StarFilledMinor","StarOutlineMinor","store","Redirect","Context","useMutation","_","UPDATE_PRODUCTS","SEARCH_PRODUCTS","ResourceListWithProducts","React","Component","favorites","selectedItems","data","searchquery","replacestring","regexsearchquery","RegExp","result","id","title","replace","handle","descriptionHtml","description","products","length","edges","map","item","props","apolloClient","mutate","mutation","variables","input","transformData","node","then","response","console","log","setSelectedItems","setState","ObjtoArray","favorite","key","componentDidMount","get","runFavorite","state","find","o","query","handleReplace","removeFavorite","set","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","singular","plural","bind","content","onAction","matchcase","shortcutActions"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport { Card,\n    ResourceList,\n    Stack,\n    TextStyle,\n    ResourceItem,\n    TextField,\n    Thumbnail,\n    DataTable,\n    Button,\n    Checkbox,\n    Icon\n } from '@shopify/polaris';\n import {\n  StarFilledMinor,\n  StarOutlineMinor\n} from '@shopify/polaris-icons';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport _ from 'lodash'\nimport './ResourceList.css'\nimport{ UPDATE_PRODUCTS, SEARCH_PRODUCTS }from \"./graphql.js\"\n\nclass ResourceListWithProducts extends React.Component {\n    static contextType = Context;\n    state = {\n        favorites:[],\n        selectedItems: [],\n\n    }\n    transformData = (data, searchquery, replacestring)=>{\n        const regexsearchquery = new RegExp(searchquery, \"gi\");\n        const result = {\n            id:data.id,\n            title: data.title.replace(regexsearchquery, replacestring),\n            handle: data.handle.replace(regexsearchquery, replacestring),\n            descriptionHtml: `<p>${data.description.replace(regexsearchquery, replacestring)}</p>`,\n        }\n        return result\n    }\n    handleReplace = (products, searchquery, replacestring) => {\n        if(!products || products.length<1){\n            return \n        }\n        products.edges.map(item=>{\n            this.props.apolloClient.mutate({\n                mutation: UPDATE_PRODUCTS,\n                variables:{input:this.transformData(item.node, searchquery, replacestring)}\n            })\n            .then(response=>{\n                console.log(response)\n            })\n        })\n    }\n\n    setSelectedItems(selectedItems){\n        console.log(selectedItems)\n        return this.setState({selectedItems})\n    }\n\n    ObjtoArray(favorite){\n        return Object.keys(favorite).map((key)=>{\n            return {...favorite[key], key}\n        })\n    }\n\n    componentDidMount(){\n        const favorite = store.get(\"favorite\")\n        this.setState({favorites:this.ObjtoArray(favorite)})\n    }\n    runFavorite(key){\n        const  {searchquery, replacestring} = this.state.favorites.find(o=>o.key===key)\n        this.props.apolloClient.query({\n            query: SEARCH_PRODUCTS,\n            variables:{searchquery}\n        })\n        .then(response=>{\n            handleReplace(response.products,searchquery, replacestring)\n        })\n    }\n    removeFavorite(key){\n        const favorite = store.get(\"favorite\")\n        delete favorite[key]\n        store.set(\"favorite\",favorite)\n        this.setState({favorites:this.ObjtoArray(favorite)})\n    }\n\n\n    \n    render() {\n      const app = this.context;\n      const redirectToProduct = () => {\n        const redirect = Redirect.create(app);\n        redirect.dispatch(\n          Redirect.Action.APP,\n          '/edit-products',\n        );\n      };\n    return (\n      <div>\n        {/* <div className=\"form-container\">\n          \n          <div className=\"form-row\">\n            <div className=\"form-input\" >\n              <TextField placeholder=\"Find\" value={this.state.searchquery} onChange={this.handleChange('searchquery')} />\n            </div>\n          </div>\n\n          <div className=\"form-row\">\n            <div className=\"form-input\" >\n              <TextField placeholder=\"Replace with\"  value={this.state.replacestring} onChange={this.handleChange('replacestring')} />\n            </div>\n            <Button className=\"form-button\" onClick={this.handleReplace.bind(this)}>Replace </Button>\n            <Button className=\"form-button\" onClick={this.handleReplace.bind(this)}>Replace all</Button>\n          </div>\n\n\n          <div className=\"form-row\">\n            <Checkbox label=\"Match case\" checked={this.state.matchcase} onChange={this.handleChange('matchcase')} />\n            <a onClick={this.toggleFavorite.bind(this)} >\n              <Icon source={this.state.saved ? StarFilledMinor : StarOutlineMinor} />\n              {this.state.saved ? \"Saved\" : \"Save to Favorite\"}\n            </a>\n          </div>\n\n        </div> */}\n\n        <Card>\n        <ResourceList\n            resourceName={{singular: 'favorite', plural: 'favorites'}}\n            items={this.state.favorites}\n            selectedItems={this.state.selectedItems}\n            onSelectionChange={this.setSelectedItems.bind(this)}\n            selectable\n            promotedBulkActions={[\n                {\n                  content: 'Bundle',\n                  onAction: () => console.log('Todo: implement bulk edit'),\n                }\n            ]}\n            renderItem={(item) => {\n            const {key, searchquery, replacestring, matchcase} = item;\n            const shortcutActions = [\n                {\n                    content: 'Run',\n                    onAction: this.runFavorite(key),\n                }, {\n                    content: 'Remove',\n                    onAction: this.removeFavorite(key),\n                }]\n              \n            return (\n                <ResourceItem\n                id={key}\n                url={\"url\"}\n                shortcutActions={shortcutActions}\n                name={searchquery}\n                >\n                <h3>\n                    <TextStyle variation=\"strong\">{searchquery}</TextStyle>\n                </h3>\n                <div>Replace with :\"{replacestring}\" {matchcase ? \"(Case Sensitive)\" : \"(Case Insensitive)\"}</div>\n                </ResourceItem>\n            );\n            }}\n        />\n        </Card>\n      </div>\n    );\n  }\n}\n\n export default ResourceListWithProducts;"]},"metadata":{},"sourceType":"module"}
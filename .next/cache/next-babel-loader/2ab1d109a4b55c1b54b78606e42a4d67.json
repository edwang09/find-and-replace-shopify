{"ast":null,"code":"import gql from 'graphql-tag';\nexport const UPDATE_PRODUCTS = gql`\n  mutation productUpdate($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        id\n        title\n        handle\n        description\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\nexport const SEARCH_PRODUCTS = gql`\n  query getProducts($searchquery: String!) {\n    products(query: $searchquery first: 50) {\n      edges {\n        node {\n          title\n          handle\n          description\n          id\n          variants(first: 1) {\n            edges {\n              node {\n                price\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nexport const constructListproduct = cursor => {\n  let addon = \"\";\n\n  if (cursor) {\n    addon = `, after : \"${cursor}\"`;\n  }\n\n  return gql`\n  query getProducts {\n    products(first:10 ${addon}) {\n        pageInfo { \n          hasNextPage \n          hasPreviousPage \n        }\n        edges {\n            cursor\n            node {\n                title\n                handle\n                description\n                productType\n                tags\n                vendor\n                id\n                variants(first: 1) {\n                    edges {\n                        node {\n                            price\n                            sku\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    }\n  }\n`;\n};\nexport const constructSearchProduct = (productList, VariantList) => {\n  return gql`\n    query getProducts($searchquery: String!) {\n      products(query: $searchquery first: 50) {\n        edges {\n          node {\n              ${productList.join(\"\\n\")}\n            id\n            variants(first: 1) {\n              edges {\n                node {\n                  ${VariantList.join(\"\\n\")}\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n};","map":{"version":3,"sources":["/home/edwang09/Documents/Upwork/Shopify/components/graphql.js"],"names":["gql","UPDATE_PRODUCTS","SEARCH_PRODUCTS","constructListproduct","cursor","addon","constructSearchProduct","productList","VariantList","join"],"mappings":"AAAA,OAAOA,GAAP,MAAgB,aAAhB;AACA,OAAO,MAAMC,eAAe,GAAGD,GAAI;;;;;;;;;;;;;;;CAA5B;AAiBP,OAAO,MAAME,eAAe,GAAGF,GAAI;;;;;;;;;;;;;;;;;;;;;CAA5B;AAsBP,OAAO,MAAMG,oBAAoB,GAAIC,MAAD,IAAU;AAC5C,MAAIC,KAAK,GAAG,EAAZ;;AACA,MAAID,MAAJ,EAAY;AACVC,IAAAA,KAAK,GAAI,cAAaD,MAAO,GAA7B;AACD;;AACD,SAAOJ,GAAI;;wBAEWK,KAAM;;;;;;;;;;;;;;;;;;;;;;;;;;;;CAF5B;AA+BD,CApCM;AAsCP,OAAO,MAAMC,sBAAsB,GAAG,CAACC,WAAD,EAAcC,WAAd,KAA4B;AAE9D,SAAOR,GAAI;;;;;gBAKCO,WAAW,CAACE,IAAZ,CAAiB,IAAjB,CAAuB;;;;;oBAKnBD,WAAW,CAACC,IAAZ,CAAiB,IAAjB,CAAuB;;;;;;;;;GAVvC;AAoBH,CAtBM","sourcesContent":["import gql from 'graphql-tag';\nexport const UPDATE_PRODUCTS = gql`\n  mutation productUpdate($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        id\n        title\n        handle\n        description\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\n\nexport const SEARCH_PRODUCTS = gql`\n  query getProducts($searchquery: String!) {\n    products(query: $searchquery first: 50) {\n      edges {\n        node {\n          title\n          handle\n          description\n          id\n          variants(first: 1) {\n            edges {\n              node {\n                price\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nexport const constructListproduct = (cursor)=>{\n  let addon = \"\"\n  if (cursor) {\n    addon = `, after : \"${cursor}\"`\n  }\n  return gql`\n  query getProducts {\n    products(first:10 ${addon}) {\n        pageInfo { \n          hasNextPage \n          hasPreviousPage \n        }\n        edges {\n            cursor\n            node {\n                title\n                handle\n                description\n                productType\n                tags\n                vendor\n                id\n                variants(first: 1) {\n                    edges {\n                        node {\n                            price\n                            sku\n                            id\n                        }\n                    }\n                }\n            }\n        }\n    }\n  }\n`;\n}\n\nexport const constructSearchProduct = (productList, VariantList)=>{\n\n    return gql`\n    query getProducts($searchquery: String!) {\n      products(query: $searchquery first: 50) {\n        edges {\n          node {\n              ${productList.join(\"\\n\")}\n            id\n            variants(first: 1) {\n              edges {\n                node {\n                  ${VariantList.join(\"\\n\")}\n                  id\n                }\n              }\n            }\n          }\n        }\n      }\n    }\n  `;\n}"]},"metadata":{},"sourceType":"module"}
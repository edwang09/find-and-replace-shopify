{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, TextField, Thumbnail, DataTable, ButtonGroup, Button } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport { useMutation } from '@apollo/react-hooks';\nconst UPDATE_PRODUCTS = gql`\n  mutation productUpdate($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        id\n        title\n        handle\n        description\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\nconst SEARCH_PRODUCTS = gql`\n  query getProducts($searchquery: String!) {\n    products(query: $searchquery first: 50) {\n      edges {\n        node {\n          title\n          handle\n          description\n          id\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n                altText\n              }\n            }\n          }\n          variants(first: 1) {\n            edges {\n              node {\n                price\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      searchquery: \"LED\",\n      replacestring: \"\"\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"handleReplace\", () => {\n      if (!this.state.products || this.state.products.length < 1) {\n        return;\n      }\n\n      this.state.products.edges.map(item => {\n        performReplace(transformData(item.node));\n      });\n    });\n\n    _defineProperty(this, \"transformData\", data => {\n      const searchquery = new RegExp(this.state.searchquery, \"gi\");\n      return _objectSpread({}, data, {\n        title: data.title.replace(searchquery, this.state.replacestring),\n        handle: data.handle.replace(searchquery, this.state.replacestring),\n        descriptionHtml: `<p>${data.description.replace(searchquery, this.state.replacestring)}</p>`\n      });\n    });\n\n    _defineProperty(this, \"performReplace\", item => {\n      const [updateProduct, {\n        loading,\n        error\n      }] = useMutation(UPDATE_PRODUCTS);\n      updateProduct({\n        variables: {\n          input: item\n        }\n      });\n    });\n\n    _defineProperty(this, \"InjectHighlight\", text => {\n      const replace = new RegExp(this.state.searchquery, \"gi\");\n      return __jsx(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: text.replace(replace, function (x) {\n            return `<span style=\"background-color:yellow\">${x}</span>`;\n          })\n        }\n      });\n    });\n\n    _defineProperty(this, \"ConvertDatatoTable\", data => {\n      if (!data || data.length < 1) {\n        return [[]];\n      }\n\n      return data.edges.map(item => {\n        const node = item.node;\n        return [this.InjectHighlight(node.title), this.InjectHighlight(node.handle), this.InjectHighlight(node.description)];\n      });\n    });\n\n    _defineProperty(this, \"replace\", () => {});\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/edit-products');\n    };\n\n    const twoWeeksFromNow = new Date(_Date$now() + 12096e5).toDateString();\n    return __jsx(\"div\", null, __jsx(TextField, {\n      label: \"search\",\n      value: this.state.searchquery,\n      onChange: this.handleChange('searchquery')\n    }), __jsx(TextField, {\n      label: \"replace\",\n      value: this.state.replacestring,\n      onChange: this.handleChange('replacestring')\n    }), __jsx(ButtonGroup, null, __jsx(Button, {\n      primary: true,\n      onClick: this.handleReplace()\n    }, \"Replace Once\"), __jsx(Button, {\n      primary: true,\n      onClick: this.handleReplace()\n    }, \"Replace All\")), __jsx(Query, {\n      query: SEARCH_PRODUCTS,\n      variables: {\n        searchquery: this.state.searchquery\n      }\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n      if (error) return __jsx(\"div\", null, error.message);\n      this.setState({\n        products: data.products\n      });\n      const rows = this.ConvertDatatoTable(data.products);\n      console.log(rows);\n      return __jsx(Card, null, __jsx(DataTable, {\n        columnContentTypes: ['text', 'text', 'text'],\n        headings: ['title', 'handle', 'description'],\n        rows: rows\n      }));\n    }));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/home/edwang09/Documents/Upwork/Shopify/components/ResourceList.js"],"names":["gql","Query","Card","ResourceList","Stack","TextStyle","TextField","Thumbnail","DataTable","ButtonGroup","Button","store","Redirect","Context","useMutation","UPDATE_PRODUCTS","SEARCH_PRODUCTS","ResourceListWithProducts","React","Component","searchquery","replacestring","field","value","setState","state","products","length","edges","map","item","performReplace","transformData","node","data","RegExp","title","replace","handle","descriptionHtml","description","updateProduct","loading","error","variables","input","text","__html","x","InjectHighlight","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","twoWeeksFromNow","Date","toDateString","handleChange","handleReplace","message","rows","ConvertDatatoTable","console","log"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card,\n    ResourceList,\n    Stack,\n    TextStyle,\n    TextField,\n    Thumbnail,\n    DataTable,\n    ButtonGroup,\n    Button\n } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport { useMutation } from '@apollo/react-hooks';\nconst UPDATE_PRODUCTS = gql`\n  mutation productUpdate($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        id\n        title\n        handle\n        description\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\nconst SEARCH_PRODUCTS = gql`\n  query getProducts($searchquery: String!) {\n    products(query: $searchquery first: 50) {\n      edges {\n        node {\n          title\n          handle\n          description\n          id\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n                altText\n              }\n            }\n          }\n          variants(first: 1) {\n            edges {\n              node {\n                price\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n    static contextType = Context;\n    state = {\n        searchquery: \"LED\",\n        replacestring:\"\"\n    }\n    \n    handleChange = (field) => {\n      return (value) => this.setState({ [field]: value });\n    };\n\n    handleReplace = () => {\n      if(!this.state.products || this.state.products.length<1){\n        return \n      }\n      this.state.products.edges.map(item=>{\n        performReplace(transformData(item.node))\n      })\n    }\n    transformData = (data)=>{\n      const searchquery = new RegExp(this.state.searchquery, \"gi\");\n      return {\n        ...data,\n        title: data.title.replace(searchquery, this.state.replacestring),\n        handle: data.handle.replace(searchquery, this.state.replacestring),\n        descriptionHtml: `<p>${data.description.replace(searchquery, this.state.replacestring)}</p>`,\n      }\n    }\n    performReplace = (item) => {\n      const [updateProduct, {loading, error}] = useMutation(UPDATE_PRODUCTS);\n      updateProduct({variables:{input:item}})\n    }\n\n    InjectHighlight = (text) => {\n      const replace = new RegExp(this.state.searchquery, \"gi\");\n      return (\n        <span\n          dangerouslySetInnerHTML={{\n            __html : text.replace(replace, function (x) {\n              return `<span style=\"background-color:yellow\">${x}</span>`;\n            })\n          }} />\n      )\n    }\n    ConvertDatatoTable = (data) =>{\n      if (!data || data.length < 1){\n        return [[]]\n      }\n      return data.edges.map(item=>{\n        const node = item.node\n        return [this.InjectHighlight(node.title), this.InjectHighlight(node.handle), this.InjectHighlight(node.description)]\n      })\n    }\n    replace = () =>{\n\n    }\n\n    render() {\n      const app = this.context;\n      const redirectToProduct = () => {\n        const redirect = Redirect.create(app);\n        redirect.dispatch(\n          Redirect.Action.APP,\n          '/edit-products',\n        );\n      };\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\n    return (\n      <div>\n      <TextField label=\"search\" value={this.state.searchquery} onChange={this.handleChange('searchquery')} />\n      <TextField label=\"replace\" value={this.state.replacestring} onChange={this.handleChange('replacestring')} />\n      <ButtonGroup>\n        <Button primary onClick={this.handleReplace()}>Replace Once</Button>\n        <Button primary onClick={this.handleReplace()}>Replace All</Button>\n      </ButtonGroup>\n      <Query query={SEARCH_PRODUCTS} variables={{ searchquery: this.state.searchquery }}>\n        {({ data, loading, error }) => {\n          if (loading) return <div>Loading…</div>;\n          if (error) return <div>{error.message}</div>;\n          this.setState({products : data.products})\n          const rows = this.ConvertDatatoTable(data.products)\n          console.log(rows)\n          return (\n            <Card>\n              <DataTable\n                columnContentTypes={[\n                  'text',\n                  'text',\n                  'text',\n                ]}\n                headings={[\n                  'title',\n                  'handle',\n                  'description',\n                ]}\n                rows={rows}\n              />\n            </Card>\n          );\n        }}\n      </Query>\n\n      </div>\n    );\n  }\n}\n\n export default ResourceListWithProducts;"]},"metadata":{},"sourceType":"module"}
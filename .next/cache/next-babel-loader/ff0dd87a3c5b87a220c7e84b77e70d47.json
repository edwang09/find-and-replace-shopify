{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, TextField, Thumbnail, DataTable, ButtonGroup, Button } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport { useMutation } from '@apollo/react-hooks';\nconst UPDATE_PRODUCTS = gql`\n  mutation productUpdate($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        id\n        title\n        handle\n        description\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\nconst SEARCH_PRODUCTS = gql`\n  query getProducts($searchquery: String!) {\n    products(query: $searchquery first: 50) {\n      edges {\n        node {\n          title\n          handle\n          description\n          id\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n                altText\n              }\n            }\n          }\n          variants(first: 1) {\n            edges {\n              node {\n                price\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nfunction ReplaceButton(props) {\n  console.log(props);\n  const [updateProduct, {\n    loading,\n    error\n  }] = useMutation(UPDATE_PRODUCTS);\n\n  const handleReplace = () => () => {\n    if (!props.products || props.products.length < 1) {\n      return;\n    }\n\n    props.products.edges.map(item => {\n      updateProduct({\n        variables: {\n          input: transformData(item.node)\n        }\n      });\n    });\n  };\n\n  const transformData = data => {\n    const searchquery = new RegExp(props.searchquery, \"gi\");\n    const result = {\n      id: data.id,\n      title: data.title.replace(searchquery, props.replacestring),\n      handle: data.handle.replace(searchquery, props.replacestring),\n      descriptionHtml: `<p>${data.description.replace(searchquery, props.replacestring)}</p>`\n    };\n    return result;\n  };\n\n  return __jsx(ButtonGroup, null, __jsx(Button, {\n    primary: true,\n    onClick: handleReplace()\n  }, \"Replace Once\"), __jsx(Button, {\n    primary: true,\n    onClick: handleReplace()\n  }, \"Replace All\"));\n}\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      searchquery: \"\",\n      replacestring: \"\"\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"handleReplace\", () => () => {\n      if (!this.state.products || this.state.products.length < 1) {\n        return;\n      }\n\n      this.state.products.edges.map(item => {\n        this.props.client.mutate({\n          mutation: UPDATE_PRODUCTS,\n          variables: {\n            input: transformData(item.node)\n          }\n        }).then(response => {\n          console.log(response);\n        });\n      });\n    });\n\n    _defineProperty(this, \"transformData\", data => {\n      const searchquery = new RegExp(this.state.searchquery, \"gi\");\n      const result = {\n        id: data.id,\n        title: data.title.replace(searchquery, this.state.replacestring),\n        handle: data.handle.replace(searchquery, this.state.replacestring),\n        descriptionHtml: `<p>${data.description.replace(searchquery, this.state.replacestring)}</p>`\n      };\n      return result;\n    });\n\n    _defineProperty(this, \"InjectHighlight\", text => {\n      const replace = new RegExp(this.state.searchquery, \"gi\");\n      return __jsx(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: text.replace(replace, function (x) {\n            return `<span style=\"background-color:yellow\">${x}</span>`;\n          })\n        }\n      });\n    });\n\n    _defineProperty(this, \"ConvertDatatoTable\", data => {\n      if (!data || data.length < 1) {\n        return [[]];\n      }\n\n      return data.edges.map(item => {\n        const node = item.node;\n        return [this.InjectHighlight(node.title), this.InjectHighlight(node.handle), this.InjectHighlight(node.description)];\n      });\n    });\n\n    _defineProperty(this, \"requery\", () => {\n      this.setState({\n        searchquery: \"\",\n        replacestring: \"\"\n      });\n    });\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/edit-products');\n    };\n\n    const twoWeeksFromNow = new Date(_Date$now() + 12096e5).toDateString();\n    return __jsx(\"div\", null, __jsx(TextField, {\n      label: \"search\",\n      value: this.state.searchquery,\n      onChange: this.handleChange('searchquery')\n    }), __jsx(TextField, {\n      label: \"replace\",\n      value: this.state.replacestring,\n      onChange: this.handleChange('replacestring')\n    }), __jsx(ButtonGroup, null, __jsx(Button, {\n      primary: true,\n      onClick: handleReplace()\n    }, \"Replace Once\"), __jsx(Button, {\n      primary: true,\n      onClick: handleReplace()\n    }, \"Replace All\")), __jsx(Mutation, {\n      mutation: UPDATE_PRODUCTS,\n      variables: {\n        description,\n        url\n      }\n    }, postMutation => __jsx(\"button\", {\n      onClick: postMutation\n    }, \"Submit\")), __jsx(Query, {\n      query: SEARCH_PRODUCTS,\n      variables: {\n        searchquery: this.state.searchquery\n      },\n      fetchPolicy: \"no-cache\",\n      onCompleted: data => {\n        this.setState({\n          products: data.products\n        });\n      }\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n      if (error) return __jsx(\"div\", null, error.message);\n      const rows = this.ConvertDatatoTable(data.products);\n      console.log(rows);\n      return __jsx(Card, null, __jsx(DataTable, {\n        columnContentTypes: ['text', 'text', 'text'],\n        headings: ['title', 'handle', 'description'],\n        rows: rows\n      }));\n    }));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/home/edwang09/Documents/Upwork/Shopify/components/ResourceList.js"],"names":["gql","Query","Mutation","Card","ResourceList","Stack","TextStyle","TextField","Thumbnail","DataTable","ButtonGroup","Button","store","Redirect","Context","useMutation","UPDATE_PRODUCTS","SEARCH_PRODUCTS","ReplaceButton","props","console","log","updateProduct","loading","error","handleReplace","products","length","edges","map","item","variables","input","transformData","node","data","searchquery","RegExp","result","id","title","replace","replacestring","handle","descriptionHtml","description","ResourceListWithProducts","React","Component","field","value","setState","state","client","mutate","mutation","then","response","text","__html","x","InjectHighlight","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","twoWeeksFromNow","Date","toDateString","handleChange","url","postMutation","message","rows","ConvertDatatoTable"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport { Card,\n    ResourceList,\n    Stack,\n    TextStyle,\n    TextField,\n    Thumbnail,\n    DataTable,\n    ButtonGroup,\n    Button\n } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport { useMutation } from '@apollo/react-hooks';\nconst UPDATE_PRODUCTS = gql`\n  mutation productUpdate($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        id\n        title\n        handle\n        description\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\nconst SEARCH_PRODUCTS = gql`\n  query getProducts($searchquery: String!) {\n    products(query: $searchquery first: 50) {\n      edges {\n        node {\n          title\n          handle\n          description\n          id\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n                altText\n              }\n            }\n          }\n          variants(first: 1) {\n            edges {\n              node {\n                price\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\nfunction ReplaceButton(props){\n  console.log(props)\n  const [updateProduct, {loading, error}] = useMutation(UPDATE_PRODUCTS);\n  const handleReplace = () => () => {\n    if(!props.products || props.products.length<1){\n      return \n    }\n    props.products.edges.map(item=>{\n      updateProduct({variables:{input:transformData(item.node)}})\n    })\n  }\n  const transformData = (data)=>{\n    const searchquery = new RegExp(props.searchquery, \"gi\");\n    const result = {\n      id:data.id,\n      title: data.title.replace(searchquery, props.replacestring),\n      handle: data.handle.replace(searchquery, props.replacestring),\n      descriptionHtml: `<p>${data.description.replace(searchquery, props.replacestring)}</p>`,\n    }\n    return result\n  }\n  return (      \n  <ButtonGroup>\n    <Button primary onClick={handleReplace()}>Replace Once</Button>\n    <Button primary onClick={handleReplace()}>Replace All</Button>\n  </ButtonGroup>\n  )\n}\nclass ResourceListWithProducts extends React.Component {\n    static contextType = Context;\n    state = {\n        searchquery: \"\",\n        replacestring:\"\"\n    }\n    \n    handleChange = (field) => {\n      return (value) => this.setState({ [field]: value });\n    };\n\n    handleReplace = () => () => {\n      if(!this.state.products || this.state.products.length<1){\n        return \n      }\n      this.state.products.edges.map(item=>{\n        this.props.client.mutate({\n          mutation: UPDATE_PRODUCTS,\n          variables:{input:transformData(item.node)}\n        })\n        .then(response=>{\n          console.log(response)\n        })\n      })\n    }\n    transformData = (data)=>{\n      const searchquery = new RegExp(this.state.searchquery, \"gi\");\n      const result = {\n        id:data.id,\n        title: data.title.replace(searchquery, this.state.replacestring),\n        handle: data.handle.replace(searchquery, this.state.replacestring),\n        descriptionHtml: `<p>${data.description.replace(searchquery, this.state.replacestring)}</p>`,\n      }\n      return result\n    }\n\n    InjectHighlight = (text) => {\n      const replace = new RegExp(this.state.searchquery, \"gi\");\n      return (\n        <span\n          dangerouslySetInnerHTML={{\n            __html : text.replace(replace, function (x) {\n              return `<span style=\"background-color:yellow\">${x}</span>`;\n            })\n          }} />\n      )\n    }\n\n    ConvertDatatoTable = (data) =>{\n      if (!data || data.length < 1){\n        return [[]]\n      }\n      return data.edges.map(item=>{\n        const node = item.node\n        return [this.InjectHighlight(node.title), this.InjectHighlight(node.handle), this.InjectHighlight(node.description)]\n      })\n    }\n    \n    requery = () =>{\n      this.setState({searchquery:\"\",replacestring:\"\"})\n    }\n\n    render() {\n      const app = this.context;\n      const redirectToProduct = () => {\n        const redirect = Redirect.create(app);\n        redirect.dispatch(\n          Redirect.Action.APP,\n          '/edit-products',\n        );\n      };\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\n    return (\n      <div>\n      <TextField label=\"search\" value={this.state.searchquery} onChange={this.handleChange('searchquery')} />\n      <TextField label=\"replace\" value={this.state.replacestring} onChange={this.handleChange('replacestring')} />\n      {/* <ReplaceButton products = {this.state.products} searchquery={this.state.searchquery} replacestring={this.state.replacestring} /> */}\n      <ButtonGroup>\n        <Button primary onClick={handleReplace()}>Replace Once</Button>\n        <Button primary onClick={handleReplace()}>Replace All</Button>\n      </ButtonGroup>\n      <Mutation mutation={UPDATE_PRODUCTS} variables={{ description, url }}>\n        {postMutation => <button onClick={postMutation}>Submit</button>}\n      </Mutation>\n      <Query query={SEARCH_PRODUCTS} variables={{ searchquery: this.state.searchquery }} fetchPolicy=\"no-cache\" onCompleted={(data)=>{\n          this.setState({products : data.products})}}>\n        {({ data, loading, error }) => {\n          if (loading) return <div>Loading…</div>;\n          if (error) return <div>{error.message}</div>;\n          const rows = this.ConvertDatatoTable(data.products)\n          console.log(rows)\n          return (\n            <Card>\n              <DataTable\n                columnContentTypes={[\n                  'text',\n                  'text',\n                  'text',\n                ]}\n                headings={[\n                  'title',\n                  'handle',\n                  'description',\n                ]}\n                rows={rows}\n              />\n            </Card>\n          );\n        }}\n      </Query>\n\n      </div>\n    );\n  }\n}\n\n export default ResourceListWithProducts;"]},"metadata":{},"sourceType":"module"}
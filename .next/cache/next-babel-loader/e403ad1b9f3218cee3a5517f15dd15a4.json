{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, TextField, Thumbnail, DataTable, ButtonGroup, Button } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nconst UPDATE_PRODUCTS = gql`\n  mutation productUpdate($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        id\n        title\n        handle\n        description\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\nconst SEARCH_PRODUCTS = gql`\n  query getProducts($searchquery: String!) {\n    products(query: $searchquery first: 50) {\n      edges {\n        node {\n          title\n          handle\n          description\n          id\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n                altText\n              }\n            }\n          }\n          variants(first: 1) {\n            edges {\n              node {\n                price\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      searchquery: \"LED\",\n      replacestring: \"\"\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      if (field === \"searchquery\") {\n        const {\n          loading,\n          error,\n          data\n        } = useQuery(SEARCH_PRODUCTS, {\n          variables: {\n            searchquery: this.state.searchquery\n          }\n        });\n        if (loading) return null;\n        if (error) return `Error! ${error}`;\n        this.setState({\n          products: data.products\n        });\n      }\n\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"handleReplace\", () => {\n      if (!this.state.products || this.state.products.length < 1) {\n        return;\n      }\n\n      this.state.products.edges.map(item => {\n        performReplace(transformData(item.node));\n      });\n    });\n\n    _defineProperty(this, \"transformData\", data => {\n      const searchquery = new RegExp(this.state.searchquery, \"gi\");\n      return _objectSpread({}, data, {\n        title: data.title.replace(searchquery, this.state.replacestring),\n        handle: data.handle.replace(searchquery, this.state.replacestring),\n        descriptionHtml: `<p>${data.description.replace(searchquery, this.state.replacestring)}</p>`\n      });\n    });\n\n    _defineProperty(this, \"performReplace\", item => {\n      const [updateProduct, {\n        loading,\n        error\n      }] = useMutation(UPDATE_PRODUCTS);\n      updateProduct({\n        variables: {\n          input: item\n        }\n      });\n    });\n\n    _defineProperty(this, \"InjectHighlight\", text => {\n      const replace = new RegExp(this.state.searchquery, \"gi\");\n      return __jsx(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: text.replace(replace, function (x) {\n            return `<span style=\"background-color:yellow\">${x}</span>`;\n          })\n        }\n      });\n    });\n\n    _defineProperty(this, \"ConvertDatatoTable\", data => {\n      if (!data || data.length < 1) {\n        return [[]];\n      }\n\n      return data.edges.map(item => {\n        const node = item.node;\n        return [this.InjectHighlight(node.title), this.InjectHighlight(node.handle), this.InjectHighlight(node.description)];\n      });\n    });\n\n    _defineProperty(this, \"replace\", () => {});\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/edit-products');\n    };\n\n    const twoWeeksFromNow = new Date(_Date$now() + 12096e5).toDateString();\n    return __jsx(\"div\", null, __jsx(TextField, {\n      label: \"search\",\n      value: this.state.searchquery,\n      onChange: this.handleChange('searchquery')\n    }), __jsx(TextField, {\n      label: \"replace\",\n      value: this.state.replacestring,\n      onChange: this.handleChange('replacestring')\n    }), __jsx(ButtonGroup, null, __jsx(Button, {\n      primary: true,\n      onClick: this.handleReplace()\n    }, \"Replace Once\"), __jsx(Button, {\n      primary: true,\n      onClick: this.handleReplace()\n    }, \"Replace All\")), this.state.products && __jsx(Card, null, __jsx(DataTable, {\n      columnContentTypes: ['text', 'text', 'text'],\n      headings: ['title', 'handle', 'description'],\n      rows: this.ConvertDatatoTable(this.state.products)\n    })), \"}\");\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/home/edwang09/Documents/Upwork/Shopify/components/ResourceList.js"],"names":["gql","Query","Card","ResourceList","Stack","TextStyle","TextField","Thumbnail","DataTable","ButtonGroup","Button","store","Redirect","Context","useMutation","useQuery","UPDATE_PRODUCTS","SEARCH_PRODUCTS","ResourceListWithProducts","React","Component","searchquery","replacestring","field","loading","error","data","variables","state","setState","products","value","length","edges","map","item","performReplace","transformData","node","RegExp","title","replace","handle","descriptionHtml","description","updateProduct","input","text","__html","x","InjectHighlight","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","twoWeeksFromNow","Date","toDateString","handleChange","handleReplace","ConvertDatatoTable"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { Query } from 'react-apollo';\nimport { Card,\n    ResourceList,\n    Stack,\n    TextStyle,\n    TextField,\n    Thumbnail,\n    DataTable,\n    ButtonGroup,\n    Button\n } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport { useMutation, useQuery } from '@apollo/react-hooks';\nconst UPDATE_PRODUCTS = gql`\n  mutation productUpdate($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        id\n        title\n        handle\n        description\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\nconst SEARCH_PRODUCTS = gql`\n  query getProducts($searchquery: String!) {\n    products(query: $searchquery first: 50) {\n      edges {\n        node {\n          title\n          handle\n          description\n          id\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n                altText\n              }\n            }\n          }\n          variants(first: 1) {\n            edges {\n              node {\n                price\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n    static contextType = Context;\n    state = {\n        searchquery: \"LED\",\n        replacestring:\"\"\n    }\n    \n    handleChange = (field) => {\n      if(field===\"searchquery\"){\n        const { loading, error, data } = useQuery(SEARCH_PRODUCTS,{\n          variables: { searchquery: this.state.searchquery },\n        });\n        if (loading) return null;\n        if (error) return `Error! ${error}`;\n        this.setState({products : data.products})\n      }\n      return (value) => this.setState({ [field]: value });\n    };\n\n    handleReplace = () => {\n      if(!this.state.products || this.state.products.length<1){\n        return \n      }\n      this.state.products.edges.map(item=>{\n        performReplace(transformData(item.node))\n      })\n    }\n    transformData = (data)=>{\n      const searchquery = new RegExp(this.state.searchquery, \"gi\");\n      return {\n        ...data,\n        title: data.title.replace(searchquery, this.state.replacestring),\n        handle: data.handle.replace(searchquery, this.state.replacestring),\n        descriptionHtml: `<p>${data.description.replace(searchquery, this.state.replacestring)}</p>`,\n      }\n    }\n    performReplace = (item) => {\n      const [updateProduct, {loading, error}] = useMutation(UPDATE_PRODUCTS);\n      updateProduct({variables:{input:item}})\n    }\n\n    InjectHighlight = (text) => {\n      const replace = new RegExp(this.state.searchquery, \"gi\");\n      return (\n        <span\n          dangerouslySetInnerHTML={{\n            __html : text.replace(replace, function (x) {\n              return `<span style=\"background-color:yellow\">${x}</span>`;\n            })\n          }} />\n      )\n    }\n    ConvertDatatoTable = (data) =>{\n      if (!data || data.length < 1){\n        return [[]]\n      }\n      return data.edges.map(item=>{\n        const node = item.node\n        return [this.InjectHighlight(node.title), this.InjectHighlight(node.handle), this.InjectHighlight(node.description)]\n      })\n    }\n    replace = () =>{\n\n    }\n\n    render() {\n      const app = this.context;\n      const redirectToProduct = () => {\n        const redirect = Redirect.create(app);\n        redirect.dispatch(\n          Redirect.Action.APP,\n          '/edit-products',\n        );\n      };\n    const twoWeeksFromNow = new Date(Date.now() + 12096e5).toDateString();\n    return (\n      <div>\n      <TextField label=\"search\" value={this.state.searchquery} onChange={this.handleChange('searchquery')} />\n      <TextField label=\"replace\" value={this.state.replacestring} onChange={this.handleChange('replacestring')} />\n      <ButtonGroup>\n        <Button primary onClick={this.handleReplace()}>Replace Once</Button>\n        <Button primary onClick={this.handleReplace()}>Replace All</Button>\n      </ButtonGroup>\n      {/* <Query query={SEARCH_PRODUCTS} variables={{ searchquery: this.state.searchquery }}>\n        {({ data, loading, error }) => { */}\n        {this.state.products && \n            <Card>\n              <DataTable\n                columnContentTypes={[\n                  'text',\n                  'text',\n                  'text',\n                ]}\n                headings={[\n                  'title',\n                  'handle',\n                  'description',\n                ]}\n                rows={this.ConvertDatatoTable(this.state.products)}\n              />\n            </Card>\n        }\n        \n      }\n      {/* </Query> */}\n\n      </div>\n    );\n  }\n}\n\n export default ResourceListWithProducts;"]},"metadata":{},"sourceType":"module"}
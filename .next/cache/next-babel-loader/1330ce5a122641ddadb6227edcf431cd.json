{"ast":null,"code":"import _Object$defineProperty from \"@babel/runtime-corejs2/core-js/object/define-property\";\nimport _Object$defineProperties from \"@babel/runtime-corejs2/core-js/object/define-properties\";\nimport _Object$getOwnPropertyDescriptors from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptors\";\nimport _Object$getOwnPropertyDescriptor from \"@babel/runtime-corejs2/core-js/object/get-own-property-descriptor\";\nimport _Object$getOwnPropertySymbols from \"@babel/runtime-corejs2/core-js/object/get-own-property-symbols\";\nimport _Object$keys from \"@babel/runtime-corejs2/core-js/object/keys\";\nimport _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction ownKeys(object, enumerableOnly) { var keys = _Object$keys(object); if (_Object$getOwnPropertySymbols) { var symbols = _Object$getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return _Object$getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (_Object$getOwnPropertyDescriptors) { _Object$defineProperties(target, _Object$getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { _Object$defineProperty(target, key, _Object$getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, TextField, Thumbnail, DataTable, Button, Checkbox, Icon, Select } from '@shopify/polaris';\nimport { StarFilledMinor, StarOutlineMinor } from '@shopify/polaris-icons';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport _ from 'lodash';\nimport './ResourceList.css';\nimport { UPDATE_PRODUCTS, LIST_PRODUCTS, constructSearchProduct } from \"./graphql.js\";\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      fetching: true,\n      searchquery: \"\",\n      replacestring: \"\",\n      matchcase: false,\n      saved: false,\n      scopes: [],\n      scopesV: [],\n      products: [],\n      allproducts: []\n    });\n\n    _defineProperty(this, \"handleScopeSelect\", (scope, isVariant) => () => {\n      const scopetype = isVariant ? \"scopesV\" : \"scopes\";\n      const scopes = this.state[scopetype];\n      const selected = this.state[scopetype].findIndex(sco => sco === scope) > -1;\n\n      if (selected) {\n        this.setState({\n          [scopetype]: scopes.filter(sco => sco !== scope)\n        }, () => {\n          this.filterQuery();\n        });\n      } else {\n        this.setState({\n          [scopetype]: [...scopes, scope]\n        }, () => {\n          this.filterQuery();\n        });\n      }\n    });\n\n    _defineProperty(this, \"toggleFavorite\", () => {\n      console.log(\"toggle fav\");\n      const favorite = store.get('favorite');\n\n      const searchform = _.pick(this.state, ['searchquery', 'replacestring', 'matchcase', 'scopes']);\n\n      const hashedfav = _Object$keys(searchform).sort().map(x => searchform[x].toString()).join(\";\");\n\n      if (!this.state.saved) {\n        if (!store.get('favorite')) {\n          console.log(\"no current fav\");\n          console.log(\"hashedfav:\" + hashedfav);\n          store.set(\"favorite\", {\n            [hashedfav]: searchform\n          });\n        } else {\n          console.log(store.get('favorite'));\n          store.set(\"favorite\", _objectSpread({}, favorite, {\n            [hashedfav]: searchform\n          }));\n        }\n\n        this.setState({\n          saved: true\n        });\n      } else {\n        delete favorite[hashedfav];\n        store.set(\"favorite\", favorite);\n        this.setState({\n          saved: false\n        });\n      }\n    });\n\n    _defineProperty(this, \"handleChange\", field => value => {\n      this.setState({\n        [field]: value\n      }, () => {\n        const searchform = _.pick(this.state, ['searchquery', 'replacestring', 'matchcase', 'scopes']);\n\n        const hashedfav = _Object$keys(searchform).sort().map(x => searchform[x].toString()).join(\";\");\n\n        const saved = store.get('favorite') && store.get('favorite')[hashedfav];\n        this.setState({\n          saved\n        });\n        this.filterQuery();\n      });\n    });\n\n    _defineProperty(this, \"handleReplace\", () => {\n      if (!this.state.products || this.state.products.length < 1) {\n        return;\n      }\n\n      let promises = this.state.products.length;\n      this.state.products.map((item, idx) => {\n        this.props.apolloClient.mutate({\n          mutation: UPDATE_PRODUCTS,\n          variables: {\n            input: this.transformData(item.node)\n          }\n        }).then(response => {\n          console.log(response);\n          promises -= 1;\n\n          if (promises === 0) {\n            this.fetchQuery();\n          }\n        });\n      });\n    });\n\n    _defineProperty(this, \"transformData\", data => {\n      const searchquery = new RegExp(this.state.searchquery, this.getRegexCase());\n      let result = {\n        id: data.id\n      };\n      this.state.scopes.map(sco => {\n        if (sco === \"tags\") {\n          result[sco] = data[sco].map(tag => tag.replace(searchquery, this.state.replacestring));\n        } else if (sco === \"description\") {\n          result[\"descriptionHtml\"] = data[sco].replace(searchquery, this.state.replacestring);\n        } else {\n          result[sco] = data[sco].replace(searchquery, this.state.replacestring);\n        }\n      });\n      console.log(result);\n      return result;\n    });\n\n    _defineProperty(this, \"InjectHighlight\", text => {\n      if (!text) {\n        return \"NA\";\n      }\n\n      const replace = new RegExp(this.state.searchquery, this.getRegexCase());\n      return __jsx(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: text.replace(replace, function (x) {\n            return `<span style=\"background-color:yellow\">${x}</span>`;\n          })\n        }\n      });\n    });\n\n    _defineProperty(this, \"ConvertDatatoTable\", data => {\n      if (!data || data.length < 1) {\n        return [[]];\n      }\n\n      return data.map(item => {\n        const node = item.node;\n        return this.getHeader().map(sco => {\n          if (sco === \"tags\") {\n            if (this.state.scopes.findIndex(scope => sco === scope) == -1) {\n              return node[sco].join(\"/n\");\n            }\n\n            return this.InjectHighlight(node[sco].join(\"/n\"));\n          }\n\n          if (this.state.scopes.findIndex(scope => sco === scope) == -1) {\n            return node[sco];\n          }\n\n          return this.InjectHighlight(node[sco]);\n        });\n      });\n    });\n  }\n\n  componentDidMount() {\n    this.fetchQuery();\n  }\n\n  getRegexCase() {\n    return this.state.matchcase ? \"g\" : \"gi\";\n  }\n\n  fetchQuery() {\n    console.log(\"fetch\");\n    this.setState({\n      fetching: true\n    });\n    this.props.apolloClient.query({\n      query: LIST_PRODUCTS\n    }).then(response => this.setState({\n      allproducts: response.data.products.edges,\n      fetching: false\n    }, () => {\n      this.filterQuery();\n    }));\n  }\n\n  filterQuery() {\n    console.log(\"filter\");\n\n    if (this.state.searchquery !== \"\" && this.state.scopes.length + this.state.scopesV.length !== 0 && this.state.allproducts !== 0) {\n      const currentproducts = this.state.allproducts.filter(prod => {\n        const regx = new RegExp(this.state.searchquery, this.getRegexCase());\n        return this.state.scopes.some(sco => {\n          if (sco === \"tags\") {\n            return prod.node[sco].join(\"/n\").search(regx) > -1;\n          }\n\n          return prod.node[sco].search(regx) > -1;\n        });\n      });\n      console.log(currentproducts);\n      this.setState({\n        products: currentproducts\n      });\n    } else {\n      this.setState({\n        products: []\n      });\n    }\n  }\n\n  getHeader() {\n    return [\"title\", \"handle\", ...this.state.scopes.filter(sco => sco !== \"title\" && sco !== \"handle\")];\n  }\n\n  getHeaderType() {\n    return Array(this.state.scopes.length).fill('text');\n  }\n\n  isScopeSelected(scope, isVariant) {\n    if (isVariant) {\n      return this.state.scopesV.findIndex(sco => sco === scope) > -1;\n    }\n\n    return this.state.scopes.findIndex(sco => sco === scope) > -1;\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/edit-products');\n    };\n\n    const selectoptions = [{\n      label: \"products\",\n      value: \"products\"\n    }, {\n      label: \"products\",\n      value: \"products\"\n    }, {\n      label: \"products\",\n      value: \"products\"\n    }];\n    return __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"form-container\"\n    }, __jsx(\"div\", {\n      className: \"form-row\"\n    }, __jsx(\"div\", {\n      className: \"form-input\"\n    }, __jsx(TextField, {\n      placeholder: \"Find\",\n      value: this.state.searchquery,\n      onChange: this.handleChange('searchquery')\n    }))), __jsx(\"h3\", null, \"Include fields: \"), __jsx(\"div\", {\n      className: \"form-row\"\n    }, __jsx(Checkbox, {\n      label: \"Title\",\n      checked: this.isScopeSelected('title'),\n      onChange: this.handleScopeSelect('title')\n    }), __jsx(Checkbox, {\n      label: \"Handle\",\n      checked: this.isScopeSelected('handle'),\n      onChange: this.handleScopeSelect('handle')\n    }), __jsx(Checkbox, {\n      label: \"Product types\",\n      checked: this.isScopeSelected('productType'),\n      onChange: this.handleScopeSelect('productType')\n    }), __jsx(Checkbox, {\n      label: \"Vendor\",\n      checked: this.isScopeSelected('vendor'),\n      onChange: this.handleScopeSelect('vendor')\n    }), __jsx(Checkbox, {\n      label: \"Tags\",\n      checked: this.isScopeSelected('tags'),\n      onChange: this.handleScopeSelect('tags')\n    }), __jsx(Checkbox, {\n      label: \"Description\",\n      checked: this.isScopeSelected('description'),\n      onChange: this.handleScopeSelect('description')\n    })), __jsx(\"h3\", null, \"Variant fields: \"), __jsx(\"div\", {\n      className: \"form-row\"\n    }, __jsx(Checkbox, {\n      label: \"Price\",\n      checked: this.isScopeSelected('price', true),\n      onChange: this.handleScopeSelect('price', true)\n    }), __jsx(Checkbox, {\n      label: \"SKU\",\n      checked: this.isScopeSelected('sku', true),\n      onChange: this.handleScopeSelect('sku', true)\n    })), __jsx(\"div\", {\n      className: \"form-row\"\n    }, __jsx(\"div\", {\n      className: \"form-input\"\n    }, __jsx(TextField, {\n      placeholder: \"Replace with\",\n      value: this.state.replacestring,\n      onChange: this.handleChange('replacestring')\n    })), __jsx(Button, {\n      className: \"form-button\",\n      onClick: this.handleReplace.bind(this)\n    }, \"Replace \"), __jsx(Button, {\n      className: \"form-button\",\n      onClick: this.handleReplace.bind(this)\n    }, \"Replace all\")), __jsx(\"div\", {\n      className: \"form-row\"\n    }, __jsx(Checkbox, {\n      label: \"Match case\",\n      checked: this.state.matchcase,\n      onChange: this.handleChange('matchcase')\n    }), __jsx(\"a\", {\n      onClick: this.toggleFavorite.bind(this)\n    }, __jsx(Icon, {\n      source: this.state.saved ? StarFilledMinor : StarOutlineMinor\n    }), this.state.saved ? \"Saved\" : \"Save to Favorite\"))), __jsx(Card, null, __jsx(DataTable, {\n      columnContentTypes: this.getHeaderType(),\n      headings: this.getHeader(),\n      rows: this.ConvertDatatoTable(this.state.products)\n    })));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":null,"metadata":{},"sourceType":"module"}
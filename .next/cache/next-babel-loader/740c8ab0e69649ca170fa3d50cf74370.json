{"ast":null,"code":"import _defineProperty from \"@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport { Card, ResourceList, Stack, TextStyle, TextField, Thumbnail, DataTable, ButtonGroup, Button } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport './ResourceList.scss';\nconst UPDATE_PRODUCTS = gql`\n  mutation productUpdate($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        id\n        title\n        handle\n        description\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\nconst SEARCH_PRODUCTS = gql`\n  query getProducts($searchquery: String!) {\n    products(query: $searchquery first: 50) {\n      edges {\n        node {\n          title\n          handle\n          description\n          id\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n                altText\n              }\n            }\n          }\n          variants(first: 1) {\n            edges {\n              node {\n                price\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"state\", {\n      searchquery: \"\",\n      replacestring: \"\"\n    });\n\n    _defineProperty(this, \"handleChange\", field => {\n      return value => this.setState({\n        [field]: value\n      });\n    });\n\n    _defineProperty(this, \"handleReplace\", () => {\n      if (!this.state.products || this.state.products.length < 1) {\n        return;\n      }\n\n      this.state.products.edges.map(item => {\n        this.props.apolloClient.mutate({\n          mutation: UPDATE_PRODUCTS,\n          variables: {\n            input: this.transformData(item.node)\n          }\n        }).then(response => {\n          console.log(response);\n        });\n      });\n      this.setState({\n        searchquery: \"\",\n        replacestring: \"\"\n      });\n    });\n\n    _defineProperty(this, \"transformData\", data => {\n      const searchquery = new RegExp(this.state.searchquery, \"gi\");\n      const result = {\n        id: data.id,\n        title: data.title.replace(searchquery, this.state.replacestring),\n        handle: data.handle.replace(searchquery, this.state.replacestring),\n        descriptionHtml: `<p>${data.description.replace(searchquery, this.state.replacestring)}</p>`\n      };\n      return result;\n    });\n\n    _defineProperty(this, \"InjectHighlight\", text => {\n      const replace = new RegExp(this.state.searchquery, \"gi\");\n      return __jsx(\"span\", {\n        dangerouslySetInnerHTML: {\n          __html: text.replace(replace, function (x) {\n            return `<span style=\"background-color:yellow\">${x}</span>`;\n          })\n        }\n      });\n    });\n\n    _defineProperty(this, \"ConvertDatatoTable\", data => {\n      if (!data || data.length < 1) {\n        return [[]];\n      }\n\n      return data.edges.map(item => {\n        const node = item.node;\n        return [this.InjectHighlight(node.title), this.InjectHighlight(node.handle), this.InjectHighlight(node.description)];\n      });\n    });\n  }\n\n  render() {\n    const app = this.context;\n\n    const redirectToProduct = () => {\n      const redirect = Redirect.create(app);\n      redirect.dispatch(Redirect.Action.APP, '/edit-products');\n    };\n\n    return __jsx(\"div\", null, __jsx(\"div\", {\n      className: \"form-container\"\n    }, __jsx(\"div\", {\n      className: \"form-row\"\n    }, __jsx(TextField, {\n      placeholder: \"Find\",\n      value: this.state.searchquery,\n      onChange: this.handleChange('searchquery')\n    })), __jsx(\"div\", {\n      className: \"form-row\"\n    }, __jsx(TextField, {\n      placeholder: \"Replace with\",\n      value: this.state.replacestring,\n      onChange: this.handleChange('replacestring')\n    }), __jsx(Button, {\n      primary: true,\n      onClick: this.handleReplace.bind(this)\n    }, \"Replace Once\"), __jsx(Button, {\n      primary: true,\n      onClick: this.handleReplace.bind(this)\n    }, \"Replace All\"))), __jsx(Query, {\n      query: SEARCH_PRODUCTS,\n      variables: {\n        searchquery: this.state.searchquery\n      },\n      pollInterval: 500,\n      onCompleted: data => {\n        this.setState({\n          products: data.products\n        });\n      }\n    }, ({\n      data,\n      loading,\n      error\n    }) => {\n      if (loading) return __jsx(\"div\", null, \"Loading\\u2026\");\n      if (error) return __jsx(\"div\", null, error.message);\n      const rows = this.ConvertDatatoTable(data.products);\n      console.log(rows);\n      return __jsx(Card, null, __jsx(DataTable, {\n        columnContentTypes: ['text', 'text', 'text'],\n        headings: ['title', 'handle', 'description'],\n        rows: rows\n      }));\n    }));\n  }\n\n}\n\n_defineProperty(ResourceListWithProducts, \"contextType\", Context);\n\nexport default ResourceListWithProducts;","map":{"version":3,"sources":["/home/edwang09/Documents/Upwork/Shopify/components/ResourceList.js"],"names":["gql","Query","Mutation","Card","ResourceList","Stack","TextStyle","TextField","Thumbnail","DataTable","ButtonGroup","Button","store","Redirect","Context","useMutation","UPDATE_PRODUCTS","SEARCH_PRODUCTS","ResourceListWithProducts","React","Component","searchquery","replacestring","field","value","setState","state","products","length","edges","map","item","props","apolloClient","mutate","mutation","variables","input","transformData","node","then","response","console","log","data","RegExp","result","id","title","replace","handle","descriptionHtml","description","text","__html","x","InjectHighlight","render","app","context","redirectToProduct","redirect","create","dispatch","Action","APP","handleChange","handleReplace","bind","loading","error","message","rows","ConvertDatatoTable"],"mappings":"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","sourcesContent":["import gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport { Card,\n    ResourceList,\n    Stack,\n    TextStyle,\n    TextField,\n    Thumbnail,\n    DataTable,\n    ButtonGroup,\n    Button\n } from '@shopify/polaris';\nimport store from 'store-js';\nimport { Redirect } from '@shopify/app-bridge/actions';\nimport { Context } from '@shopify/app-bridge-react';\nimport { useMutation } from '@apollo/react-hooks';\nimport './ResourceList.scss'\nconst UPDATE_PRODUCTS = gql`\n  mutation productUpdate($input: ProductInput!) {\n    productUpdate(input: $input) {\n      product {\n        id\n        title\n        handle\n        description\n      }\n      userErrors {\n        field\n        message\n      }\n    }\n  }\n`;\nconst SEARCH_PRODUCTS = gql`\n  query getProducts($searchquery: String!) {\n    products(query: $searchquery first: 50) {\n      edges {\n        node {\n          title\n          handle\n          description\n          id\n          images(first: 1) {\n            edges {\n              node {\n                originalSrc\n                altText\n              }\n            }\n          }\n          variants(first: 1) {\n            edges {\n              node {\n                price\n                id\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass ResourceListWithProducts extends React.Component {\n    static contextType = Context;\n    state = {\n        searchquery: \"\",\n        replacestring:\"\"\n    }\n    \n    handleChange = (field) => {\n      return (value) => this.setState({ [field]: value });\n    };\n\n    handleReplace = () => {\n      if(!this.state.products || this.state.products.length<1){\n        return \n      }\n      this.state.products.edges.map(item=>{\n        this.props.apolloClient.mutate({\n          mutation: UPDATE_PRODUCTS,\n          variables:{input:this.transformData(item.node)}\n        })\n        .then(response=>{\n          console.log(response)\n        })\n      })\n\n      this.setState({searchquery:\"\",replacestring:\"\"})\n\n    }\n\n    transformData = (data)=>{\n      const searchquery = new RegExp(this.state.searchquery, \"gi\");\n      const result = {\n        id:data.id,\n        title: data.title.replace(searchquery, this.state.replacestring),\n        handle: data.handle.replace(searchquery, this.state.replacestring),\n        descriptionHtml: `<p>${data.description.replace(searchquery, this.state.replacestring)}</p>`,\n      }\n      return result\n    }\n\n    InjectHighlight = (text) => {\n      const replace = new RegExp(this.state.searchquery, \"gi\");\n      return (\n        <span\n          dangerouslySetInnerHTML={{\n            __html : text.replace(replace, function (x) {\n              return `<span style=\"background-color:yellow\">${x}</span>`;\n            })\n          }} />\n      )\n    }\n\n    ConvertDatatoTable = (data) =>{\n      if (!data || data.length < 1){\n        return [[]]\n      }\n      return data.edges.map(item=>{\n        const node = item.node\n        return [this.InjectHighlight(node.title), this.InjectHighlight(node.handle), this.InjectHighlight(node.description)]\n      })\n    }\n    \n    render() {\n      const app = this.context;\n      const redirectToProduct = () => {\n        const redirect = Redirect.create(app);\n        redirect.dispatch(\n          Redirect.Action.APP,\n          '/edit-products',\n        );\n      };\n    return (\n      <div>\n        <div className=\"form-container\">\n          \n          <div className=\"form-row\">\n            <TextField placeholder=\"Find\" value={this.state.searchquery} onChange={this.handleChange('searchquery')} />\n          </div>\n\n          <div className=\"form-row\">\n            <TextField placeholder=\"Replace with\" value={this.state.replacestring} onChange={this.handleChange('replacestring')} />\n            <Button primary onClick={this.handleReplace.bind(this)}>Replace Once</Button>\n            <Button primary onClick={this.handleReplace.bind(this)}>Replace All</Button>\n          </div>\n\n        </div>\n      <Query query={SEARCH_PRODUCTS} variables={{ searchquery: this.state.searchquery }} \n    pollInterval={500} onCompleted={(data)=>{\n          this.setState({products : data.products})}}>\n        {({ data, loading, error }) => {\n          if (loading) return <div>Loading…</div>;\n          if (error) return <div>{error.message}</div>;\n          const rows = this.ConvertDatatoTable(data.products)\n          console.log(rows)\n          return (\n            <Card>\n              <DataTable\n                columnContentTypes={[\n                  'text',\n                  'text',\n                  'text',\n                ]}\n                headings={[\n                  'title',\n                  'handle',\n                  'description',\n                ]}\n                rows={rows}\n              />\n            </Card>\n          );\n        }}\n      </Query>\n\n      </div>\n    );\n  }\n}\n\n export default ResourceListWithProducts;"]},"metadata":{},"sourceType":"module"}